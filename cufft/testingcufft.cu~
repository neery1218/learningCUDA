#include <cuda.h>
#include <cufft.h>


static const int WORK_SIZE = 10;

/**
 * This macro checks return value of the CUDA runtime call and exits
 * the application if the call failed.
 */
#define CUDA_CHECK_RETURN(value) {											\
	cudaError_t _m_cudaStat = value;										\
	if (_m_cudaStat != cudaSuccess) {										\
		fprintf(stderr, "Error %s at line %d in file %s\n",					\
				cudaGetErrorString(_m_cudaStat), __LINE__, __FILE__);		\
		exit(1);															\
	} }

/**
 * CUDA kernel function that reverses the order of bits in each element of the array.
 */

__global__ void square (int *a){
	a[threadIdx.x]*=a[threadIdx.x];
}

__global__ void subtract10 (int *data){
	data[threadIdx.x]-=10;
}

/**
 * Host function
 */
int main(void) {
	int *d = NULL;
	int i;
	int idata[WORK_SIZE], odata[WORK_SIZE];

	for (i = 0; i < WORK_SIZE; i++)
		idata[i] = i;

	CUDA_CHECK_RETURN(cudaMalloc((int**) &d, sizeof(int) * WORK_SIZE));
	CUDA_CHECK_RETURN(cudaMemcpy(d, idata, sizeof(int) * WORK_SIZE, cudaMemcpyHostToDevice));

	square<<<1, WORK_SIZE>>>(d);

	CUDA_CHECK_RETURN(cudaThreadSynchronize());	// Wait for the GPU launched work to complete
	CUDA_CHECK_RETURN(cudaGetLastError());

	//subtract10<<<1, WORK_SIZE>>>(d);

		CUDA_CHECK_RETURN(cudaDeviceSynchronize());	// Wait for the GPU launched work to complete
		CUDA_CHECK_RETURN(cudaGetLastError());

		cufftHandle plan;
		cufftComplex *data;
		cudaMalloc((void**)&data, sizeof(cufftComplex)*WORK_SIZE);
		cufftPlan1d(&plan, WORK_SIZE, CUFFT_C2C,1);
		cufftExecC2C(plan, data, data, CUFFT_FORWARD);

		cudaDeviceSynchronize();
		cufftDestroy(plan);
		cudaFree(data);

	CUDA_CHECK_RETURN(cudaMemcpy(odata, d, sizeof(int) * WORK_SIZE, cudaMemcpyDeviceToHost));

	for (i = 0; i < WORK_SIZE; i++)
		printf("Input value: %d, device output: %d\n", idata[i], odata[i]);
	//bananananananannanananas
	CUDA_CHECK_RETURN(cudaFree((int*) d));
	CUDA_CHECK_RETURN(cudaDeviceReset());

	return 0;
}
